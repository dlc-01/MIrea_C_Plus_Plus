#include <iostream>
using namespace std;

template <class T> void Swap (T &x,T &y) {
    T z = x;
    x = y;
    y = z;
}
template <class T> void OutXY (T &x, T &y) {
    cout << x <<" "<< y<< "\n" ;
}
class My_class {
    int a;
    float b;
public:
    My_class (int a, float b) {
        this->a = a;
        this->b = b;
    }
    void Out() {
        cout << a << " " << b << "\n";
    }
    My_class operator = (My_class &T) {
        a = T.a;
        b = T.b;
        return *this;
    }
};

int main () {
    int x = 1;
    int y = 2;
    cout << "Before exchange (intact)\n";
    OutXY(x, y);
    Swap(x, y);
    cout << "After the exchange\n";
    OutXY(x, y);
    float x1 = 1.5;
    float y1 = 5.9;
    cout << "Before the exchange (float)\n";
    OutXY(x1, y1);
    Swap(x1, y1);
    cout << "After the exchange\n";
    OutXY(x1, y1);
    My_class t1(1, 1.5), t2(2, 9.9);
    cout << "Before the exchange (classes)\n";
    t1.Out();
    t2.Out();
    Swap(t1, t2);
    cout << "After the exchange\n";
    t1.Out();
    t2.Out();
    return 0;
}

//- Реализован и продемонстрирован шаблон функции swap, которая осуществляет обмен между двумя однотипными структурами, от переменных до объектов произвольных классов
//- Написана шаблонная функция, реализующая сортировку внутри динамического массива, состоящего из любых числовых типов данных, либо строк (сортировка для строк в библиографическом виде).
//- Был создан шаблонный класс Set, реализующий тип "Множество" с основными методами, такими как проверка на пустоту, проверка на заполнение, добавление элемента, проверка принадлежности элемента и извлечение элемента. Был проведен тестирование шаблона на данных типа "множество целых чисел" и также объявлены множества точек, комплексных чисел и слов. Для удобства просмотра элементов множества был написан прямой итератор. Класс-контейнер позволяет работать с данными любого типа и реализовывать операции объединения, пересечения и включения. Работа организована с использованием заголовочных файлов и файлов реализации.
//
/?